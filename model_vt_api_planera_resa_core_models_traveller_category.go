/*
Planera Resa

Sök och planera resor med Västtrafik

API version: v4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// VTApiPlaneraResaCoreModelsTravellerCategory the model 'VTApiPlaneraResaCoreModelsTravellerCategory'
type VTApiPlaneraResaCoreModelsTravellerCategory string

// List of VT.ApiPlaneraResa.Core.Models.TravellerCategory
const (
	VTAPIPLANERARESACOREMODELSTRAVELLERCATEGORY_UNKNOWN VTApiPlaneraResaCoreModelsTravellerCategory = "unknown"
	VTAPIPLANERARESACOREMODELSTRAVELLERCATEGORY_ADULT VTApiPlaneraResaCoreModelsTravellerCategory = "adult"
	VTAPIPLANERARESACOREMODELSTRAVELLERCATEGORY_YOUTH VTApiPlaneraResaCoreModelsTravellerCategory = "youth"
)

// All allowed values of VTApiPlaneraResaCoreModelsTravellerCategory enum
var AllowedVTApiPlaneraResaCoreModelsTravellerCategoryEnumValues = []VTApiPlaneraResaCoreModelsTravellerCategory{
	"unknown",
	"adult",
	"youth",
}

func (v *VTApiPlaneraResaCoreModelsTravellerCategory) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := VTApiPlaneraResaCoreModelsTravellerCategory(value)
	for _, existing := range AllowedVTApiPlaneraResaCoreModelsTravellerCategoryEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid VTApiPlaneraResaCoreModelsTravellerCategory", value)
}

// NewVTApiPlaneraResaCoreModelsTravellerCategoryFromValue returns a pointer to a valid VTApiPlaneraResaCoreModelsTravellerCategory
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewVTApiPlaneraResaCoreModelsTravellerCategoryFromValue(v string) (*VTApiPlaneraResaCoreModelsTravellerCategory, error) {
	ev := VTApiPlaneraResaCoreModelsTravellerCategory(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for VTApiPlaneraResaCoreModelsTravellerCategory: valid values are %v", v, AllowedVTApiPlaneraResaCoreModelsTravellerCategoryEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v VTApiPlaneraResaCoreModelsTravellerCategory) IsValid() bool {
	for _, existing := range AllowedVTApiPlaneraResaCoreModelsTravellerCategoryEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to VT.ApiPlaneraResa.Core.Models.TravellerCategory value
func (v VTApiPlaneraResaCoreModelsTravellerCategory) Ptr() *VTApiPlaneraResaCoreModelsTravellerCategory {
	return &v
}

type NullableVTApiPlaneraResaCoreModelsTravellerCategory struct {
	value *VTApiPlaneraResaCoreModelsTravellerCategory
	isSet bool
}

func (v NullableVTApiPlaneraResaCoreModelsTravellerCategory) Get() *VTApiPlaneraResaCoreModelsTravellerCategory {
	return v.value
}

func (v *NullableVTApiPlaneraResaCoreModelsTravellerCategory) Set(val *VTApiPlaneraResaCoreModelsTravellerCategory) {
	v.value = val
	v.isSet = true
}

func (v NullableVTApiPlaneraResaCoreModelsTravellerCategory) IsSet() bool {
	return v.isSet
}

func (v *NullableVTApiPlaneraResaCoreModelsTravellerCategory) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVTApiPlaneraResaCoreModelsTravellerCategory(val *VTApiPlaneraResaCoreModelsTravellerCategory) *NullableVTApiPlaneraResaCoreModelsTravellerCategory {
	return &NullableVTApiPlaneraResaCoreModelsTravellerCategory{value: val, isSet: true}
}

func (v NullableVTApiPlaneraResaCoreModelsTravellerCategory) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVTApiPlaneraResaCoreModelsTravellerCategory) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

