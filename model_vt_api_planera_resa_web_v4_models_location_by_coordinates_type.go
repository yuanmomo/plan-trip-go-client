/*
Planera Resa

Sök och planera resor med Västtrafik

API version: v4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// VTApiPlaneraResaWebV4ModelsLocationByCoordinatesType A subset of LocationType
type VTApiPlaneraResaWebV4ModelsLocationByCoordinatesType string

// List of VT.ApiPlaneraResa.Web.V4.Models.LocationByCoordinatesType
const (
	VTAPIPLANERARESAWEBV4MODELSLOCATIONBYCOORDINATESTYPE_STOPAREA VTApiPlaneraResaWebV4ModelsLocationByCoordinatesType = "stoparea"
	VTAPIPLANERARESAWEBV4MODELSLOCATIONBYCOORDINATESTYPE_STOPPOINT VTApiPlaneraResaWebV4ModelsLocationByCoordinatesType = "stoppoint"
	VTAPIPLANERARESAWEBV4MODELSLOCATIONBYCOORDINATESTYPE_POINTOFINTEREST VTApiPlaneraResaWebV4ModelsLocationByCoordinatesType = "pointofinterest"
	VTAPIPLANERARESAWEBV4MODELSLOCATIONBYCOORDINATESTYPE_METASTATION VTApiPlaneraResaWebV4ModelsLocationByCoordinatesType = "metastation"
)

// All allowed values of VTApiPlaneraResaWebV4ModelsLocationByCoordinatesType enum
var AllowedVTApiPlaneraResaWebV4ModelsLocationByCoordinatesTypeEnumValues = []VTApiPlaneraResaWebV4ModelsLocationByCoordinatesType{
	"stoparea",
	"stoppoint",
	"pointofinterest",
	"metastation",
}

func (v *VTApiPlaneraResaWebV4ModelsLocationByCoordinatesType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := VTApiPlaneraResaWebV4ModelsLocationByCoordinatesType(value)
	for _, existing := range AllowedVTApiPlaneraResaWebV4ModelsLocationByCoordinatesTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid VTApiPlaneraResaWebV4ModelsLocationByCoordinatesType", value)
}

// NewVTApiPlaneraResaWebV4ModelsLocationByCoordinatesTypeFromValue returns a pointer to a valid VTApiPlaneraResaWebV4ModelsLocationByCoordinatesType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewVTApiPlaneraResaWebV4ModelsLocationByCoordinatesTypeFromValue(v string) (*VTApiPlaneraResaWebV4ModelsLocationByCoordinatesType, error) {
	ev := VTApiPlaneraResaWebV4ModelsLocationByCoordinatesType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for VTApiPlaneraResaWebV4ModelsLocationByCoordinatesType: valid values are %v", v, AllowedVTApiPlaneraResaWebV4ModelsLocationByCoordinatesTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v VTApiPlaneraResaWebV4ModelsLocationByCoordinatesType) IsValid() bool {
	for _, existing := range AllowedVTApiPlaneraResaWebV4ModelsLocationByCoordinatesTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to VT.ApiPlaneraResa.Web.V4.Models.LocationByCoordinatesType value
func (v VTApiPlaneraResaWebV4ModelsLocationByCoordinatesType) Ptr() *VTApiPlaneraResaWebV4ModelsLocationByCoordinatesType {
	return &v
}

type NullableVTApiPlaneraResaWebV4ModelsLocationByCoordinatesType struct {
	value *VTApiPlaneraResaWebV4ModelsLocationByCoordinatesType
	isSet bool
}

func (v NullableVTApiPlaneraResaWebV4ModelsLocationByCoordinatesType) Get() *VTApiPlaneraResaWebV4ModelsLocationByCoordinatesType {
	return v.value
}

func (v *NullableVTApiPlaneraResaWebV4ModelsLocationByCoordinatesType) Set(val *VTApiPlaneraResaWebV4ModelsLocationByCoordinatesType) {
	v.value = val
	v.isSet = true
}

func (v NullableVTApiPlaneraResaWebV4ModelsLocationByCoordinatesType) IsSet() bool {
	return v.isSet
}

func (v *NullableVTApiPlaneraResaWebV4ModelsLocationByCoordinatesType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVTApiPlaneraResaWebV4ModelsLocationByCoordinatesType(val *VTApiPlaneraResaWebV4ModelsLocationByCoordinatesType) *NullableVTApiPlaneraResaWebV4ModelsLocationByCoordinatesType {
	return &NullableVTApiPlaneraResaWebV4ModelsLocationByCoordinatesType{value: val, isSet: true}
}

func (v NullableVTApiPlaneraResaWebV4ModelsLocationByCoordinatesType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVTApiPlaneraResaWebV4ModelsLocationByCoordinatesType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

