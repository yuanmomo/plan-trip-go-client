/*
Planera Resa

Sök och planera resor med Västtrafik

API version: v4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// VTApiPlaneraResaCoreModelsPositionTransportMode the model 'VTApiPlaneraResaCoreModelsPositionTransportMode'
type VTApiPlaneraResaCoreModelsPositionTransportMode string

// List of VT.ApiPlaneraResa.Core.Models.PositionTransportMode
const (
	VTAPIPLANERARESACOREMODELSPOSITIONTRANSPORTMODE_TRAM VTApiPlaneraResaCoreModelsPositionTransportMode = "tram"
	VTAPIPLANERARESACOREMODELSPOSITIONTRANSPORTMODE_BUS VTApiPlaneraResaCoreModelsPositionTransportMode = "bus"
	VTAPIPLANERARESACOREMODELSPOSITIONTRANSPORTMODE_FERRY VTApiPlaneraResaCoreModelsPositionTransportMode = "ferry"
	VTAPIPLANERARESACOREMODELSPOSITIONTRANSPORTMODE_TRAIN VTApiPlaneraResaCoreModelsPositionTransportMode = "train"
	VTAPIPLANERARESACOREMODELSPOSITIONTRANSPORTMODE_TAXI VTApiPlaneraResaCoreModelsPositionTransportMode = "taxi"
)

// All allowed values of VTApiPlaneraResaCoreModelsPositionTransportMode enum
var AllowedVTApiPlaneraResaCoreModelsPositionTransportModeEnumValues = []VTApiPlaneraResaCoreModelsPositionTransportMode{
	"tram",
	"bus",
	"ferry",
	"train",
	"taxi",
}

func (v *VTApiPlaneraResaCoreModelsPositionTransportMode) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := VTApiPlaneraResaCoreModelsPositionTransportMode(value)
	for _, existing := range AllowedVTApiPlaneraResaCoreModelsPositionTransportModeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid VTApiPlaneraResaCoreModelsPositionTransportMode", value)
}

// NewVTApiPlaneraResaCoreModelsPositionTransportModeFromValue returns a pointer to a valid VTApiPlaneraResaCoreModelsPositionTransportMode
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewVTApiPlaneraResaCoreModelsPositionTransportModeFromValue(v string) (*VTApiPlaneraResaCoreModelsPositionTransportMode, error) {
	ev := VTApiPlaneraResaCoreModelsPositionTransportMode(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for VTApiPlaneraResaCoreModelsPositionTransportMode: valid values are %v", v, AllowedVTApiPlaneraResaCoreModelsPositionTransportModeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v VTApiPlaneraResaCoreModelsPositionTransportMode) IsValid() bool {
	for _, existing := range AllowedVTApiPlaneraResaCoreModelsPositionTransportModeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to VT.ApiPlaneraResa.Core.Models.PositionTransportMode value
func (v VTApiPlaneraResaCoreModelsPositionTransportMode) Ptr() *VTApiPlaneraResaCoreModelsPositionTransportMode {
	return &v
}

type NullableVTApiPlaneraResaCoreModelsPositionTransportMode struct {
	value *VTApiPlaneraResaCoreModelsPositionTransportMode
	isSet bool
}

func (v NullableVTApiPlaneraResaCoreModelsPositionTransportMode) Get() *VTApiPlaneraResaCoreModelsPositionTransportMode {
	return v.value
}

func (v *NullableVTApiPlaneraResaCoreModelsPositionTransportMode) Set(val *VTApiPlaneraResaCoreModelsPositionTransportMode) {
	v.value = val
	v.isSet = true
}

func (v NullableVTApiPlaneraResaCoreModelsPositionTransportMode) IsSet() bool {
	return v.isSet
}

func (v *NullableVTApiPlaneraResaCoreModelsPositionTransportMode) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVTApiPlaneraResaCoreModelsPositionTransportMode(val *VTApiPlaneraResaCoreModelsPositionTransportMode) *NullableVTApiPlaneraResaCoreModelsPositionTransportMode {
	return &NullableVTApiPlaneraResaCoreModelsPositionTransportMode{value: val, isSet: true}
}

func (v NullableVTApiPlaneraResaCoreModelsPositionTransportMode) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVTApiPlaneraResaCoreModelsPositionTransportMode) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

