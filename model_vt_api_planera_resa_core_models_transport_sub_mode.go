/*
Planera Resa

Sök och planera resor med Västtrafik

API version: v4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// VTApiPlaneraResaCoreModelsTransportSubMode the model 'VTApiPlaneraResaCoreModelsTransportSubMode'
type VTApiPlaneraResaCoreModelsTransportSubMode string

// List of VT.ApiPlaneraResa.Core.Models.TransportSubMode
const (
	VTAPIPLANERARESACOREMODELSTRANSPORTSUBMODE_UNKNOWN VTApiPlaneraResaCoreModelsTransportSubMode = "unknown"
	VTAPIPLANERARESACOREMODELSTRANSPORTSUBMODE_NONE VTApiPlaneraResaCoreModelsTransportSubMode = "none"
	VTAPIPLANERARESACOREMODELSTRANSPORTSUBMODE_VASTTAGEN VTApiPlaneraResaCoreModelsTransportSubMode = "vasttagen"
	VTAPIPLANERARESACOREMODELSTRANSPORTSUBMODE_LONGDISTANCETRAIN VTApiPlaneraResaCoreModelsTransportSubMode = "longdistancetrain"
	VTAPIPLANERARESACOREMODELSTRANSPORTSUBMODE_REGIONALTRAIN VTApiPlaneraResaCoreModelsTransportSubMode = "regionaltrain"
)

// All allowed values of VTApiPlaneraResaCoreModelsTransportSubMode enum
var AllowedVTApiPlaneraResaCoreModelsTransportSubModeEnumValues = []VTApiPlaneraResaCoreModelsTransportSubMode{
	"unknown",
	"none",
	"vasttagen",
	"longdistancetrain",
	"regionaltrain",
}

func (v *VTApiPlaneraResaCoreModelsTransportSubMode) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := VTApiPlaneraResaCoreModelsTransportSubMode(value)
	for _, existing := range AllowedVTApiPlaneraResaCoreModelsTransportSubModeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid VTApiPlaneraResaCoreModelsTransportSubMode", value)
}

// NewVTApiPlaneraResaCoreModelsTransportSubModeFromValue returns a pointer to a valid VTApiPlaneraResaCoreModelsTransportSubMode
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewVTApiPlaneraResaCoreModelsTransportSubModeFromValue(v string) (*VTApiPlaneraResaCoreModelsTransportSubMode, error) {
	ev := VTApiPlaneraResaCoreModelsTransportSubMode(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for VTApiPlaneraResaCoreModelsTransportSubMode: valid values are %v", v, AllowedVTApiPlaneraResaCoreModelsTransportSubModeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v VTApiPlaneraResaCoreModelsTransportSubMode) IsValid() bool {
	for _, existing := range AllowedVTApiPlaneraResaCoreModelsTransportSubModeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to VT.ApiPlaneraResa.Core.Models.TransportSubMode value
func (v VTApiPlaneraResaCoreModelsTransportSubMode) Ptr() *VTApiPlaneraResaCoreModelsTransportSubMode {
	return &v
}

type NullableVTApiPlaneraResaCoreModelsTransportSubMode struct {
	value *VTApiPlaneraResaCoreModelsTransportSubMode
	isSet bool
}

func (v NullableVTApiPlaneraResaCoreModelsTransportSubMode) Get() *VTApiPlaneraResaCoreModelsTransportSubMode {
	return v.value
}

func (v *NullableVTApiPlaneraResaCoreModelsTransportSubMode) Set(val *VTApiPlaneraResaCoreModelsTransportSubMode) {
	v.value = val
	v.isSet = true
}

func (v NullableVTApiPlaneraResaCoreModelsTransportSubMode) IsSet() bool {
	return v.isSet
}

func (v *NullableVTApiPlaneraResaCoreModelsTransportSubMode) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVTApiPlaneraResaCoreModelsTransportSubMode(val *VTApiPlaneraResaCoreModelsTransportSubMode) *NullableVTApiPlaneraResaCoreModelsTransportSubMode {
	return &NullableVTApiPlaneraResaCoreModelsTransportSubMode{value: val, isSet: true}
}

func (v NullableVTApiPlaneraResaCoreModelsTransportSubMode) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVTApiPlaneraResaCoreModelsTransportSubMode) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

