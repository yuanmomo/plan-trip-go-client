/*
Planera Resa

Sök och planera resor med Västtrafik

API version: v4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"reflect"
)


// PositionsApiService PositionsApi service
type PositionsApiService service

type ApiPositionsGetRequest struct {
	ctx context.Context
	ApiService *PositionsApiService
	lowerLeftLat *float64
	lowerLeftLong *float64
	upperRightLat *float64
	upperRightLong *float64
	transportModes *[]VTApiPlaneraResaCoreModelsPositionTransportMode
	detailsReferences *[]string
	lineDesignations *[]string
	limit *int32
}

// Lower left latitude of bounding box.
func (r ApiPositionsGetRequest) LowerLeftLat(lowerLeftLat float64) ApiPositionsGetRequest {
	r.lowerLeftLat = &lowerLeftLat
	return r
}

// Lower left longitude of bounding box.
func (r ApiPositionsGetRequest) LowerLeftLong(lowerLeftLong float64) ApiPositionsGetRequest {
	r.lowerLeftLong = &lowerLeftLong
	return r
}

// Upper right latitude of bounding box.
func (r ApiPositionsGetRequest) UpperRightLat(upperRightLat float64) ApiPositionsGetRequest {
	r.upperRightLat = &upperRightLat
	return r
}

// Upper right longitude of bounding box.
func (r ApiPositionsGetRequest) UpperRightLong(upperRightLong float64) ApiPositionsGetRequest {
	r.upperRightLong = &upperRightLong
	return r
}

// The transport modes to include when searching for journeys, if none specified all transport modes are included.
func (r ApiPositionsGetRequest) TransportModes(transportModes []VTApiPlaneraResaCoreModelsPositionTransportMode) ApiPositionsGetRequest {
	r.transportModes = &transportModes
	return r
}

// Filter journeys by one or more journey details reference.
func (r ApiPositionsGetRequest) DetailsReferences(detailsReferences []string) ApiPositionsGetRequest {
	r.detailsReferences = &detailsReferences
	return r
}

// Only journeys running the given lineDesignations (case sensitive) are part of the result.
func (r ApiPositionsGetRequest) LineDesignations(lineDesignations []string) ApiPositionsGetRequest {
	r.lineDesignations = &lineDesignations
	return r
}

// Maximum number of journeys in response. Range from 1 to 200. Defaults to 100
func (r ApiPositionsGetRequest) Limit(limit int32) ApiPositionsGetRequest {
	r.limit = &limit
	return r
}

func (r ApiPositionsGetRequest) Execute() ([]VTApiPlaneraResaWebV4ModelsPositionsJourneyPositionApiModel, *http.Response, error) {
	return r.ApiService.PositionsGetExecute(r)
}

/*
PositionsGet Returns journey positions within a bounding box

Sample request:

    GET /positions?lowerLeftLat=57.721723&lowerLeftLong=12.011882&upperRightLat=57.737549&upperRightLong=12.039268&limit=100

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiPositionsGetRequest
*/
func (a *PositionsApiService) PositionsGet(ctx context.Context) ApiPositionsGetRequest {
	return ApiPositionsGetRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []VTApiPlaneraResaWebV4ModelsPositionsJourneyPositionApiModel
func (a *PositionsApiService) PositionsGetExecute(r ApiPositionsGetRequest) ([]VTApiPlaneraResaWebV4ModelsPositionsJourneyPositionApiModel, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []VTApiPlaneraResaWebV4ModelsPositionsJourneyPositionApiModel
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PositionsApiService.PositionsGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/positions"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.lowerLeftLat == nil {
		return localVarReturnValue, nil, reportError("lowerLeftLat is required and must be specified")
	}
	if r.lowerLeftLong == nil {
		return localVarReturnValue, nil, reportError("lowerLeftLong is required and must be specified")
	}
	if r.upperRightLat == nil {
		return localVarReturnValue, nil, reportError("upperRightLat is required and must be specified")
	}
	if r.upperRightLong == nil {
		return localVarReturnValue, nil, reportError("upperRightLong is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "lowerLeftLat", r.lowerLeftLat, "")
	parameterAddToHeaderOrQuery(localVarQueryParams, "lowerLeftLong", r.lowerLeftLong, "")
	parameterAddToHeaderOrQuery(localVarQueryParams, "upperRightLat", r.upperRightLat, "")
	parameterAddToHeaderOrQuery(localVarQueryParams, "upperRightLong", r.upperRightLong, "")
	if r.transportModes != nil {
		t := *r.transportModes
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "transportModes", s.Index(i), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "transportModes", t, "multi")
		}
	}
	if r.detailsReferences != nil {
		t := *r.detailsReferences
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "detailsReferences", s.Index(i), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "detailsReferences", t, "multi")
		}
	}
	if r.lineDesignations != nil {
		t := *r.lineDesignations
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "lineDesignations", s.Index(i), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "lineDesignations", t, "multi")
		}
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"text/plain", "application/json", "text/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v VTApiPlaneraResaWebV4ModelsApiError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
