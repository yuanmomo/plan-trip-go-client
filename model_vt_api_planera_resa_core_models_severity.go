/*
Planera Resa

Sök och planera resor med Västtrafik

API version: v4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// VTApiPlaneraResaCoreModelsSeverity the model 'VTApiPlaneraResaCoreModelsSeverity'
type VTApiPlaneraResaCoreModelsSeverity string

// List of VT.ApiPlaneraResa.Core.Models.Severity
const (
	VTAPIPLANERARESACOREMODELSSEVERITY_UNKNOWN VTApiPlaneraResaCoreModelsSeverity = "unknown"
	VTAPIPLANERARESACOREMODELSSEVERITY_LOW VTApiPlaneraResaCoreModelsSeverity = "low"
	VTAPIPLANERARESACOREMODELSSEVERITY_NORMAL VTApiPlaneraResaCoreModelsSeverity = "normal"
	VTAPIPLANERARESACOREMODELSSEVERITY_HIGH VTApiPlaneraResaCoreModelsSeverity = "high"
)

// All allowed values of VTApiPlaneraResaCoreModelsSeverity enum
var AllowedVTApiPlaneraResaCoreModelsSeverityEnumValues = []VTApiPlaneraResaCoreModelsSeverity{
	"unknown",
	"low",
	"normal",
	"high",
}

func (v *VTApiPlaneraResaCoreModelsSeverity) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := VTApiPlaneraResaCoreModelsSeverity(value)
	for _, existing := range AllowedVTApiPlaneraResaCoreModelsSeverityEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid VTApiPlaneraResaCoreModelsSeverity", value)
}

// NewVTApiPlaneraResaCoreModelsSeverityFromValue returns a pointer to a valid VTApiPlaneraResaCoreModelsSeverity
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewVTApiPlaneraResaCoreModelsSeverityFromValue(v string) (*VTApiPlaneraResaCoreModelsSeverity, error) {
	ev := VTApiPlaneraResaCoreModelsSeverity(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for VTApiPlaneraResaCoreModelsSeverity: valid values are %v", v, AllowedVTApiPlaneraResaCoreModelsSeverityEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v VTApiPlaneraResaCoreModelsSeverity) IsValid() bool {
	for _, existing := range AllowedVTApiPlaneraResaCoreModelsSeverityEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to VT.ApiPlaneraResa.Core.Models.Severity value
func (v VTApiPlaneraResaCoreModelsSeverity) Ptr() *VTApiPlaneraResaCoreModelsSeverity {
	return &v
}

type NullableVTApiPlaneraResaCoreModelsSeverity struct {
	value *VTApiPlaneraResaCoreModelsSeverity
	isSet bool
}

func (v NullableVTApiPlaneraResaCoreModelsSeverity) Get() *VTApiPlaneraResaCoreModelsSeverity {
	return v.value
}

func (v *NullableVTApiPlaneraResaCoreModelsSeverity) Set(val *VTApiPlaneraResaCoreModelsSeverity) {
	v.value = val
	v.isSet = true
}

func (v NullableVTApiPlaneraResaCoreModelsSeverity) IsSet() bool {
	return v.isSet
}

func (v *NullableVTApiPlaneraResaCoreModelsSeverity) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVTApiPlaneraResaCoreModelsSeverity(val *VTApiPlaneraResaCoreModelsSeverity) *NullableVTApiPlaneraResaCoreModelsSeverity {
	return &NullableVTApiPlaneraResaCoreModelsSeverity{value: val, isSet: true}
}

func (v NullableVTApiPlaneraResaCoreModelsSeverity) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVTApiPlaneraResaCoreModelsSeverity) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

