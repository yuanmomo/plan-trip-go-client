/*
Planera Resa

Sök och planera resor med Västtrafik

API version: v4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// VTApiPlaneraResaWebV4ModelsLocationByTextType A subset of LocationType
type VTApiPlaneraResaWebV4ModelsLocationByTextType string

// List of VT.ApiPlaneraResa.Web.V4.Models.LocationByTextType
const (
	VTAPIPLANERARESAWEBV4MODELSLOCATIONBYTEXTTYPE_STOPAREA VTApiPlaneraResaWebV4ModelsLocationByTextType = "stoparea"
	VTAPIPLANERARESAWEBV4MODELSLOCATIONBYTEXTTYPE_ADDRESS VTApiPlaneraResaWebV4ModelsLocationByTextType = "address"
	VTAPIPLANERARESAWEBV4MODELSLOCATIONBYTEXTTYPE_POINTOFINTEREST VTApiPlaneraResaWebV4ModelsLocationByTextType = "pointofinterest"
	VTAPIPLANERARESAWEBV4MODELSLOCATIONBYTEXTTYPE_METASTATION VTApiPlaneraResaWebV4ModelsLocationByTextType = "metastation"
)

// All allowed values of VTApiPlaneraResaWebV4ModelsLocationByTextType enum
var AllowedVTApiPlaneraResaWebV4ModelsLocationByTextTypeEnumValues = []VTApiPlaneraResaWebV4ModelsLocationByTextType{
	"stoparea",
	"address",
	"pointofinterest",
	"metastation",
}

func (v *VTApiPlaneraResaWebV4ModelsLocationByTextType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := VTApiPlaneraResaWebV4ModelsLocationByTextType(value)
	for _, existing := range AllowedVTApiPlaneraResaWebV4ModelsLocationByTextTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid VTApiPlaneraResaWebV4ModelsLocationByTextType", value)
}

// NewVTApiPlaneraResaWebV4ModelsLocationByTextTypeFromValue returns a pointer to a valid VTApiPlaneraResaWebV4ModelsLocationByTextType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewVTApiPlaneraResaWebV4ModelsLocationByTextTypeFromValue(v string) (*VTApiPlaneraResaWebV4ModelsLocationByTextType, error) {
	ev := VTApiPlaneraResaWebV4ModelsLocationByTextType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for VTApiPlaneraResaWebV4ModelsLocationByTextType: valid values are %v", v, AllowedVTApiPlaneraResaWebV4ModelsLocationByTextTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v VTApiPlaneraResaWebV4ModelsLocationByTextType) IsValid() bool {
	for _, existing := range AllowedVTApiPlaneraResaWebV4ModelsLocationByTextTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to VT.ApiPlaneraResa.Web.V4.Models.LocationByTextType value
func (v VTApiPlaneraResaWebV4ModelsLocationByTextType) Ptr() *VTApiPlaneraResaWebV4ModelsLocationByTextType {
	return &v
}

type NullableVTApiPlaneraResaWebV4ModelsLocationByTextType struct {
	value *VTApiPlaneraResaWebV4ModelsLocationByTextType
	isSet bool
}

func (v NullableVTApiPlaneraResaWebV4ModelsLocationByTextType) Get() *VTApiPlaneraResaWebV4ModelsLocationByTextType {
	return v.value
}

func (v *NullableVTApiPlaneraResaWebV4ModelsLocationByTextType) Set(val *VTApiPlaneraResaWebV4ModelsLocationByTextType) {
	v.value = val
	v.isSet = true
}

func (v NullableVTApiPlaneraResaWebV4ModelsLocationByTextType) IsSet() bool {
	return v.isSet
}

func (v *NullableVTApiPlaneraResaWebV4ModelsLocationByTextType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVTApiPlaneraResaWebV4ModelsLocationByTextType(val *VTApiPlaneraResaWebV4ModelsLocationByTextType) *NullableVTApiPlaneraResaWebV4ModelsLocationByTextType {
	return &NullableVTApiPlaneraResaWebV4ModelsLocationByTextType{value: val, isSet: true}
}

func (v NullableVTApiPlaneraResaWebV4ModelsLocationByTextType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVTApiPlaneraResaWebV4ModelsLocationByTextType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

