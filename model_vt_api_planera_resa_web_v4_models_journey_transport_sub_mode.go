/*
Planera Resa

Sök och planera resor med Västtrafik

API version: v4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// VTApiPlaneraResaWebV4ModelsJourneyTransportSubMode A subset of TransportMode
type VTApiPlaneraResaWebV4ModelsJourneyTransportSubMode string

// List of VT.ApiPlaneraResa.Web.V4.Models.JourneyTransportSubMode
const (
	VTAPIPLANERARESAWEBV4MODELSJOURNEYTRANSPORTSUBMODE_VASTTAGEN VTApiPlaneraResaWebV4ModelsJourneyTransportSubMode = "vasttagen"
	VTAPIPLANERARESAWEBV4MODELSJOURNEYTRANSPORTSUBMODE_LONGDISTANCETRAIN VTApiPlaneraResaWebV4ModelsJourneyTransportSubMode = "longdistancetrain"
	VTAPIPLANERARESAWEBV4MODELSJOURNEYTRANSPORTSUBMODE_REGIONALTRAIN VTApiPlaneraResaWebV4ModelsJourneyTransportSubMode = "regionaltrain"
)

// All allowed values of VTApiPlaneraResaWebV4ModelsJourneyTransportSubMode enum
var AllowedVTApiPlaneraResaWebV4ModelsJourneyTransportSubModeEnumValues = []VTApiPlaneraResaWebV4ModelsJourneyTransportSubMode{
	"vasttagen",
	"longdistancetrain",
	"regionaltrain",
}

func (v *VTApiPlaneraResaWebV4ModelsJourneyTransportSubMode) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := VTApiPlaneraResaWebV4ModelsJourneyTransportSubMode(value)
	for _, existing := range AllowedVTApiPlaneraResaWebV4ModelsJourneyTransportSubModeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid VTApiPlaneraResaWebV4ModelsJourneyTransportSubMode", value)
}

// NewVTApiPlaneraResaWebV4ModelsJourneyTransportSubModeFromValue returns a pointer to a valid VTApiPlaneraResaWebV4ModelsJourneyTransportSubMode
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewVTApiPlaneraResaWebV4ModelsJourneyTransportSubModeFromValue(v string) (*VTApiPlaneraResaWebV4ModelsJourneyTransportSubMode, error) {
	ev := VTApiPlaneraResaWebV4ModelsJourneyTransportSubMode(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for VTApiPlaneraResaWebV4ModelsJourneyTransportSubMode: valid values are %v", v, AllowedVTApiPlaneraResaWebV4ModelsJourneyTransportSubModeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v VTApiPlaneraResaWebV4ModelsJourneyTransportSubMode) IsValid() bool {
	for _, existing := range AllowedVTApiPlaneraResaWebV4ModelsJourneyTransportSubModeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to VT.ApiPlaneraResa.Web.V4.Models.JourneyTransportSubMode value
func (v VTApiPlaneraResaWebV4ModelsJourneyTransportSubMode) Ptr() *VTApiPlaneraResaWebV4ModelsJourneyTransportSubMode {
	return &v
}

type NullableVTApiPlaneraResaWebV4ModelsJourneyTransportSubMode struct {
	value *VTApiPlaneraResaWebV4ModelsJourneyTransportSubMode
	isSet bool
}

func (v NullableVTApiPlaneraResaWebV4ModelsJourneyTransportSubMode) Get() *VTApiPlaneraResaWebV4ModelsJourneyTransportSubMode {
	return v.value
}

func (v *NullableVTApiPlaneraResaWebV4ModelsJourneyTransportSubMode) Set(val *VTApiPlaneraResaWebV4ModelsJourneyTransportSubMode) {
	v.value = val
	v.isSet = true
}

func (v NullableVTApiPlaneraResaWebV4ModelsJourneyTransportSubMode) IsSet() bool {
	return v.isSet
}

func (v *NullableVTApiPlaneraResaWebV4ModelsJourneyTransportSubMode) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVTApiPlaneraResaWebV4ModelsJourneyTransportSubMode(val *VTApiPlaneraResaWebV4ModelsJourneyTransportSubMode) *NullableVTApiPlaneraResaWebV4ModelsJourneyTransportSubMode {
	return &NullableVTApiPlaneraResaWebV4ModelsJourneyTransportSubMode{value: val, isSet: true}
}

func (v NullableVTApiPlaneraResaWebV4ModelsJourneyTransportSubMode) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVTApiPlaneraResaWebV4ModelsJourneyTransportSubMode) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

