/*
Planera Resa

Sök och planera resor med Västtrafik

API version: v4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// VTApiPlaneraResaCoreModelsTimeValidityUnit the model 'VTApiPlaneraResaCoreModelsTimeValidityUnit'
type VTApiPlaneraResaCoreModelsTimeValidityUnit string

// List of VT.ApiPlaneraResa.Core.Models.TimeValidityUnit
const (
	VTAPIPLANERARESACOREMODELSTIMEVALIDITYUNIT_UNKNOWN VTApiPlaneraResaCoreModelsTimeValidityUnit = "unknown"
	VTAPIPLANERARESACOREMODELSTIMEVALIDITYUNIT_MINUTES VTApiPlaneraResaCoreModelsTimeValidityUnit = "minutes"
	VTAPIPLANERARESACOREMODELSTIMEVALIDITYUNIT_HOURS VTApiPlaneraResaCoreModelsTimeValidityUnit = "hours"
	VTAPIPLANERARESACOREMODELSTIMEVALIDITYUNIT_DAYS VTApiPlaneraResaCoreModelsTimeValidityUnit = "days"
	VTAPIPLANERARESACOREMODELSTIMEVALIDITYUNIT_YEAR VTApiPlaneraResaCoreModelsTimeValidityUnit = "year"
	VTAPIPLANERARESACOREMODELSTIMEVALIDITYUNIT_SEMESTER VTApiPlaneraResaCoreModelsTimeValidityUnit = "semester"
	VTAPIPLANERARESACOREMODELSTIMEVALIDITYUNIT_SCHOOLYEAR VTApiPlaneraResaCoreModelsTimeValidityUnit = "schoolyear"
	VTAPIPLANERARESACOREMODELSTIMEVALIDITYUNIT_UNLIMITED VTApiPlaneraResaCoreModelsTimeValidityUnit = "unlimited"
)

// All allowed values of VTApiPlaneraResaCoreModelsTimeValidityUnit enum
var AllowedVTApiPlaneraResaCoreModelsTimeValidityUnitEnumValues = []VTApiPlaneraResaCoreModelsTimeValidityUnit{
	"unknown",
	"minutes",
	"hours",
	"days",
	"year",
	"semester",
	"schoolyear",
	"unlimited",
}

func (v *VTApiPlaneraResaCoreModelsTimeValidityUnit) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := VTApiPlaneraResaCoreModelsTimeValidityUnit(value)
	for _, existing := range AllowedVTApiPlaneraResaCoreModelsTimeValidityUnitEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid VTApiPlaneraResaCoreModelsTimeValidityUnit", value)
}

// NewVTApiPlaneraResaCoreModelsTimeValidityUnitFromValue returns a pointer to a valid VTApiPlaneraResaCoreModelsTimeValidityUnit
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewVTApiPlaneraResaCoreModelsTimeValidityUnitFromValue(v string) (*VTApiPlaneraResaCoreModelsTimeValidityUnit, error) {
	ev := VTApiPlaneraResaCoreModelsTimeValidityUnit(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for VTApiPlaneraResaCoreModelsTimeValidityUnit: valid values are %v", v, AllowedVTApiPlaneraResaCoreModelsTimeValidityUnitEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v VTApiPlaneraResaCoreModelsTimeValidityUnit) IsValid() bool {
	for _, existing := range AllowedVTApiPlaneraResaCoreModelsTimeValidityUnitEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to VT.ApiPlaneraResa.Core.Models.TimeValidityUnit value
func (v VTApiPlaneraResaCoreModelsTimeValidityUnit) Ptr() *VTApiPlaneraResaCoreModelsTimeValidityUnit {
	return &v
}

type NullableVTApiPlaneraResaCoreModelsTimeValidityUnit struct {
	value *VTApiPlaneraResaCoreModelsTimeValidityUnit
	isSet bool
}

func (v NullableVTApiPlaneraResaCoreModelsTimeValidityUnit) Get() *VTApiPlaneraResaCoreModelsTimeValidityUnit {
	return v.value
}

func (v *NullableVTApiPlaneraResaCoreModelsTimeValidityUnit) Set(val *VTApiPlaneraResaCoreModelsTimeValidityUnit) {
	v.value = val
	v.isSet = true
}

func (v NullableVTApiPlaneraResaCoreModelsTimeValidityUnit) IsSet() bool {
	return v.isSet
}

func (v *NullableVTApiPlaneraResaCoreModelsTimeValidityUnit) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVTApiPlaneraResaCoreModelsTimeValidityUnit(val *VTApiPlaneraResaCoreModelsTimeValidityUnit) *NullableVTApiPlaneraResaCoreModelsTimeValidityUnit {
	return &NullableVTApiPlaneraResaCoreModelsTimeValidityUnit{value: val, isSet: true}
}

func (v NullableVTApiPlaneraResaCoreModelsTimeValidityUnit) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVTApiPlaneraResaCoreModelsTimeValidityUnit) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

