/*
Planera Resa

Testing StopPointsAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package openapi

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "vasttrafik-notification/plan-trip-go-client"
)

func Test_openapi_StopPointsAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test StopPointsAPIService StopPointsStopPointGidArrivalsDetailsReferenceDetailsGet", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var detailsReference string
		var stopPointGid string

		resp, httpRes, err := apiClient.StopPointsApi.StopPointsStopPointGidArrivalsDetailsReferenceDetailsGet(context.Background(), detailsReference, stopPointGid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test StopPointsAPIService StopPointsStopPointGidArrivalsGet", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var stopPointGid string

		resp, httpRes, err := apiClient.StopPointsApi.StopPointsStopPointGidArrivalsGet(context.Background(), stopPointGid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test StopPointsAPIService StopPointsStopPointGidDeparturesDetailsReferenceDetailsGet", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var detailsReference string
		var stopPointGid string

		resp, httpRes, err := apiClient.StopPointsApi.StopPointsStopPointGidDeparturesDetailsReferenceDetailsGet(context.Background(), detailsReference, stopPointGid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test StopPointsAPIService StopPointsStopPointGidDeparturesGet", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var stopPointGid string

		resp, httpRes, err := apiClient.StopPointsApi.StopPointsStopPointGidDeparturesGet(context.Background(), stopPointGid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
