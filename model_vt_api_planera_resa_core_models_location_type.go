/*
Planera Resa

Sök och planera resor med Västtrafik

API version: v4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// VTApiPlaneraResaCoreModelsLocationType the model 'VTApiPlaneraResaCoreModelsLocationType'
type VTApiPlaneraResaCoreModelsLocationType string

// List of VT.ApiPlaneraResa.Core.Models.LocationType
const (
	VTAPIPLANERARESACOREMODELSLOCATIONTYPE_UNKNOWN VTApiPlaneraResaCoreModelsLocationType = "unknown"
	VTAPIPLANERARESACOREMODELSLOCATIONTYPE_STOPAREA VTApiPlaneraResaCoreModelsLocationType = "stoparea"
	VTAPIPLANERARESACOREMODELSLOCATIONTYPE_STOPPOINT VTApiPlaneraResaCoreModelsLocationType = "stoppoint"
	VTAPIPLANERARESACOREMODELSLOCATIONTYPE_ADDRESS VTApiPlaneraResaCoreModelsLocationType = "address"
	VTAPIPLANERARESACOREMODELSLOCATIONTYPE_POINTOFINTEREST VTApiPlaneraResaCoreModelsLocationType = "pointofinterest"
	VTAPIPLANERARESACOREMODELSLOCATIONTYPE_METASTATION VTApiPlaneraResaCoreModelsLocationType = "metastation"
)

// All allowed values of VTApiPlaneraResaCoreModelsLocationType enum
var AllowedVTApiPlaneraResaCoreModelsLocationTypeEnumValues = []VTApiPlaneraResaCoreModelsLocationType{
	"unknown",
	"stoparea",
	"stoppoint",
	"address",
	"pointofinterest",
	"metastation",
}

func (v *VTApiPlaneraResaCoreModelsLocationType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := VTApiPlaneraResaCoreModelsLocationType(value)
	for _, existing := range AllowedVTApiPlaneraResaCoreModelsLocationTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid VTApiPlaneraResaCoreModelsLocationType", value)
}

// NewVTApiPlaneraResaCoreModelsLocationTypeFromValue returns a pointer to a valid VTApiPlaneraResaCoreModelsLocationType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewVTApiPlaneraResaCoreModelsLocationTypeFromValue(v string) (*VTApiPlaneraResaCoreModelsLocationType, error) {
	ev := VTApiPlaneraResaCoreModelsLocationType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for VTApiPlaneraResaCoreModelsLocationType: valid values are %v", v, AllowedVTApiPlaneraResaCoreModelsLocationTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v VTApiPlaneraResaCoreModelsLocationType) IsValid() bool {
	for _, existing := range AllowedVTApiPlaneraResaCoreModelsLocationTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to VT.ApiPlaneraResa.Core.Models.LocationType value
func (v VTApiPlaneraResaCoreModelsLocationType) Ptr() *VTApiPlaneraResaCoreModelsLocationType {
	return &v
}

type NullableVTApiPlaneraResaCoreModelsLocationType struct {
	value *VTApiPlaneraResaCoreModelsLocationType
	isSet bool
}

func (v NullableVTApiPlaneraResaCoreModelsLocationType) Get() *VTApiPlaneraResaCoreModelsLocationType {
	return v.value
}

func (v *NullableVTApiPlaneraResaCoreModelsLocationType) Set(val *VTApiPlaneraResaCoreModelsLocationType) {
	v.value = val
	v.isSet = true
}

func (v NullableVTApiPlaneraResaCoreModelsLocationType) IsSet() bool {
	return v.isSet
}

func (v *NullableVTApiPlaneraResaCoreModelsLocationType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVTApiPlaneraResaCoreModelsLocationType(val *VTApiPlaneraResaCoreModelsLocationType) *NullableVTApiPlaneraResaCoreModelsLocationType {
	return &NullableVTApiPlaneraResaCoreModelsLocationType{value: val, isSet: true}
}

func (v NullableVTApiPlaneraResaCoreModelsLocationType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVTApiPlaneraResaCoreModelsLocationType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

